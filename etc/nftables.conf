#!/usr/sbin/nft -f

define iface = "enp5s0"
define my_ip = 192.168.1.27/32
#define my_ip6 = 
define dns = { 45.90.28.38, 45.90.30.38 }
define dns6 = { 2a07:a8c0::c7:45db, 2a07:a8c1::c7:45db }
define ntp = { 200.160.7.186, 201.49.148.135, 200.186.125.195, 200.20.186.76, 200.160.7.193, 200.160.7.197, 200.160.0.8, 200.189.40.8, 200.192.232.8 }
define ntp6 = { 2001:12ff:0:7::186, 2001:12ff::8, 2001:12ff:0:7::193 }
define private_network = { 10.0.0.0/8, 172.16.0.0/12, 192.0.2.0/24, 192.168.0.0/16, 224.0.0.0-255.255.255.255 }
define web_ports = { 80, 443 }

flush ruleset

table ip filter {
	chain RAW_IN {
		type filter hook input priority raw; policy accept
		iifname $iface ip saddr $private_network ip daddr $my_ip counter drop
	}

	chain INPUT {
		type filter hook input priority filter; policy drop;

		iifname "lo" ip daddr 127.0.0.0/8 counter accept
		iifname $iface ip daddr $my_ip ct state invalid counter drop
		iifname $iface ip daddr $my_ip ct state related,established counter accept
	}

	chain FORWARD {
		type filter hook forward priority filter; policy drop;
	}

	chain RAW_OUT {
		type filter hook output priority raw; policy accept;
	}

	chain OUTPUT {
		type filter hook output priority filter; policy drop;

		oifname "lo" ip saddr 127.0.0.0/8 counter accept
		oifname $iface ip saddr $my_ip ip daddr 224.0.0.0-255.255.255.255 counter drop
		oifname $iface ip saddr $my_ip ct state established counter accept
		oifname $iface ip saddr $my_ip icmp type echo-request ct state new counter accept
		#oifname $iface ip saddr $my_ip ip daddr $dns udp sport 1024-65535 udp dport 53 ct state new counter accept
		oifname $iface ip saddr $my_ip tcp sport 1024-65535 tcp dport $web_ports ct state new counter accept
		oifname $iface ip saddr $my_ip ip daddr $ntp udp sport 123 udp dport 123 ct state new counter accept
	}

}

table ip6 filter {
	chain RAW_IN {
		type filter hook input priority raw; policy accept;
		iifname $iface ip6 saddr { 2001:db8::/32, ff00::/8 } counter drop
	}

	chain INPUT {
		type filter hook input priority filter; policy drop;

		iifname "lo" ip6 daddr ::1 counter accept
		iifname $iface ct state invalid counter drop
		iifname $iface ct state related,established counter accept
	}

	chain FORWARD {
		type filter hook forward priority filter; policy drop;
	}

	chain RAW_OUT {
		type filter hook output priority raw; policy accept;
	}

	chain OUTPUT {
		type filter hook output priority filter; policy drop;

		oifname "lo" ip6 saddr ::1 counter accept
		oifname $iface ct state established counter accept
		oifname $iface meta l4proto icmp ct state new counter accept
		#oifname $iface ip6 daddr $dns6 udp sport 1024-65535 udp dport 53 ct state new counter accept
		oifname $iface tcp sport 1024-65535 tcp dport $web_ports ct state new counter accept
		oifname $iface ip6 daddr $ntp6 udp sport 123 udp dport 123 ct state new counter accept
	}
}

table bridge filter {
	chain INPUT {
		type filter hook input priority filter; policy accept;
	}

	chain FORWARD {
		type filter hook forward priority filter; policy drop;
	}

	chain OUTPUT {
		type filter hook output priority filter; policy accept;
	}
}

#include "/usr/local/etc/nftables.list.d/portScan.nft"
#include "/usr/local/etc/nftables.list.d/valveSteam.nft"
